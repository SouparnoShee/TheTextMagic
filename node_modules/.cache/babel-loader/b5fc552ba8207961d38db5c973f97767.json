{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soupa\\\\Desktop\\\\REACT\\\\my-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\"; // Write about react router in your notebook \n\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // giving a state for alert message that is null\n  const [Alertmsg, setAlertmsg] = useState(null); // Making a function in which returning the setalertmsg a object,whose values are being provided in different areas\n\n  const showalertmsg = (message, type) => {\n    setAlertmsg({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlertmsg(null);\n    }, 1500);\n  }; // Made a state to set the navbar mode dark or light(As light and dark are used in bootstrap to set color)\n\n\n  const [mode, setmode] = useState(\"light\"); // Made a function to change in dark or light mode when we click\n\n  const togglemodes = () => {\n    if (mode === 'light') {\n      setmode(\"dark\");\n      document.body.style.background = \"#212529\";\n      document.title = \"TTM - Dark mode\"; // This is the function call with the object value of setAlertmsg\n\n      showalertmsg(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setmode(\"light\");\n      document.body.style.background = \"white\";\n      document.title = \"TTM - Light mode\";\n      showalertmsg(\"Light mode has been enabled\", \"success\");\n    }\n  };\n\n  const redmode = () => {\n    if (mode === 'light') {\n      setmode(\"dark\");\n      document.body.style.background = \"#AA4A44\"; // This is the function call with the object value of setAlertmsg\n\n      showalertmsg(\"Red mode has been enabled\", \"success\");\n    } else {\n      setmode(\"light\");\n      document.body.style.background = \"white\";\n      showalertmsg(\"Red mode has been Disabled\", \"success\");\n    }\n  }; // Here we return only the component which is defined in other place\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        title: \"TheTextMagic\",\n        mode: mode,\n        Enable: togglemodes,\n        redred: redmode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        Alertmsg: Alertmsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(TextForm, {\n            heading: \"Please fill up the form\",\n            mode: mode,\n            Show: showalertmsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/about\",\n          element: /*#__PURE__*/_jsxDEV(About, {\n            mode: mode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"gBq8oohG4wIPxpgeJnuyG6mis4g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","About","Navbar","TextForm","Alert","BrowserRouter","Routes","Route","App","Alertmsg","setAlertmsg","showalertmsg","message","type","msg","setTimeout","mode","setmode","togglemodes","document","body","style","background","title","redmode"],"sources":["C:/Users/soupa/Desktop/REACT/my-app/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\"\nimport Navbar from \"./components/Navbar\"\nimport TextForm from \"./components/TextForm\"\nimport Alert from \"./components/Alert\"\n// Write about react router in your notebook \nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  // giving a state for alert message that is null\n  const [Alertmsg, setAlertmsg] = useState(null)\n  // Making a function in which returning the setalertmsg a object,whose values are being provided in different areas\n  const showalertmsg = (message, type) => {\n    setAlertmsg({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlertmsg(null);\n    }, 1500);\n  }\n  // Made a state to set the navbar mode dark or light(As light and dark are used in bootstrap to set color)\n  const [mode, setmode] = useState(\"light\")\n  // Made a function to change in dark or light mode when we click\n  const togglemodes = () => {\n    if (mode === 'light') {\n      setmode(\"dark\")\n      document.body.style.background = \"#212529\"\n      document.title = \"TTM - Dark mode\"\n      // This is the function call with the object value of setAlertmsg\n      showalertmsg(\"Dark mode has been enabled\", \"success\")\n    } else {\n      setmode(\"light\")\n      document.body.style.background = \"white\"\n      document.title = \"TTM - Light mode\"\n      showalertmsg(\"Light mode has been enabled\", \"success\")\n    }\n  }\n  const redmode = () => {\n    if (mode === 'light') {\n      setmode(\"dark\")\n      document.body.style.background = \"#AA4A44\"\n      // This is the function call with the object value of setAlertmsg\n      showalertmsg(\"Red mode has been enabled\", \"success\")\n    } else {\n      setmode(\"light\")\n      document.body.style.background = \"white\"\n      showalertmsg(\"Red mode has been Disabled\", \"success\")\n    }\n  }\n\n  // Here we return only the component which is defined in other place\n  return (\n    <>\n    <BrowserRouter>\n      {/* Used mode and enable to set props and inside that one is state given above and one is logic(function) in which the state is being changed */}\n      <Navbar title=\"TheTextMagic\" mode={mode} Enable={togglemodes} redred={redmode} />\n      <Alert Alertmsg={Alertmsg} />\n\n        \n          <Routes>\n             <Route exact path=\"/\" element={<TextForm heading=\"Please fill up the form\" mode={mode} Show={showalertmsg}/>}></Route>\n            <Route exact path=\"/about\" element={<About mode={mode}/>}></Route>\n          </Routes>\n        \n        {/* Same mode is used for text form to change the color of texts */}\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}